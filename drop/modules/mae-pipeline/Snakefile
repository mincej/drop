MAE_WORKDIR = cfg.MAE.renameLocalDir()
MAE_index_input,MAE_graph_file,MAE_index_output = cfg.MAE.getModuleIndexFiles("mae-pipeline",MAE_WORKDIR)

#https://stackoverflow.com/questions/16461656/how-to-pass-array-as-an-argument-to-a-function-in-bash#:~:text=You%20cannot%20pass%20an%20array%2C%20you%20can%20only%20pass%20its%20elements%20(i.e.%20the%20expanded%20array).
log_func = """
    function runScript(){
        SCRIPT=$1
        ARGS=$2[@]
        ARGS=("${!ARGS}")
        LOG=$3
        TO_LOG=$4

        if [[ "$TO_LOG" == "yes" ]]; then 
            $SCRIPT ${ARGS[@]} > $LOG 2>&1
        elif [[ "$TO_LOG" == "tee" ]]; then
            $SCRIPT ${ARGS[@]} 2>&1 | tee --append $LOG
        else
            $SCRIPT ${ARGS[@]}
        fi
    }
"""

rule mae:
    input:  MAE_index_input,MAE_graph_file
    output: MAE_index_output
    run:
        if cfg.MAE.run:
            ci(str(MAE_WORKDIR), 'mae-pipeline')

rule mae_dependency:
    output: MAE_graph_file
    shell:
        """
        snakemake --nolock --rulegraph {MAE_index_output} | \
            sed -ne '/digraph snakemake_dag/,/}}/p' | \
            dot -Tsvg -Grankdir=TB > {output}
        """

rule sampleQC:
    input: cfg.getHtmlFromScript(MAE_WORKDIR / "QC" / "Datasets.R")


## MAE
rule mae_createSNVs:
    input:
        ncbi2ucsc = cfg.workDir / "Scripts/Pipeline/chr_NCBI_UCSC.txt",
        ucsc2ncbi = cfg.workDir / "Scripts/Pipeline/chr_UCSC_NCBI.txt",
        vcf_file  = lambda w: cfg.MAE.getVcf(w.vcf),
        bam_file  = lambda w: sa.getFilePath(w.rna, 'RNA_BAM_FILE'),
        script    = MAE_WORKDIR / "MAE" / "filterSNVs.sh",
        snv_params = lambda w: cfg.processedDataDir / "mae" / "params/snvs" / (w.rna + "_snvParams.csv")
    output:
        snvs_filename = cfg.processedDataDir / "mae" / "snvs" / "{vcf}--{rna}.vcf.gz",
        snvs_index = cfg.processedDataDir / "mae" / "snvs" / "{vcf}--{rna}.vcf.gz.tbi"
    log:
        str(tmp_dir) + "/MAE/snvs/{vcf}--{rna}.log"
    params:
        bcftools = cfg.getTool("bcftoolsCmd"),
        samtools = cfg.getTool("samtoolsCmd"),
        to_log = cfg.get("stream_to_log"),
        log_func = log_func
    shell:
        """
        PACK=( {input.ncbi2ucsc} {input.ucsc2ncbi} {input.vcf_file} \
        {wildcards.vcf} {input.bam_file} {output.snvs_filename} \
        {params.bcftools} {params.samtools} )

        {params.log_func}

        runScript {input.script} PACK {log} {params.to_log}
        """

rule mae_allelicCounts:
    input:
        ncbi2ucsc = cfg.workDir / "Scripts/Pipeline/chr_NCBI_UCSC.txt",
        ucsc2ncbi = cfg.workDir / "Scripts/Pipeline/chr_UCSC_NCBI.txt",
        vcf_file  = rules.mae_createSNVs.output.snvs_filename,
        bam_file  = lambda w: sa.getFilePath(w.rna, 'RNA_BAM_FILE'),
        fasta     = lambda w: cfg.MAE.getGenomePath(w.rna),
        dict      = lambda w: cfg.genome.getFastaDict(cfg.MAE.getGenomePath(w.rna)),
        script    = MAE_WORKDIR / "MAE" / "ASEReadCounter.sh"
    output:
        counted = cfg.processedDataDir / "mae" / "allelic_counts" / "{vcf}--{rna}.csv.gz"
    params:
        bcftools = cfg.getTool("bcftoolsCmd"),
        samtools = cfg.getTool("samtoolsCmd"),
        gatk = cfg.getTool("gatkCmd"),
        gatkIgnoreHeaderCheck = cfg.MAE.get("gatkIgnoreHeaderCheck"),
        to_log = cfg.get("stream_to_log"),
        log_func = log_func
    log:
        str(tmp_dir) + "/MAE/allelic_counts/{vcf}--{rna}.log"
    shell:
        """
        PACK=( {input.ncbi2ucsc} {input.ucsc2ncbi} \
        {input.vcf_file} {input.bam_file} {wildcards.vcf}--{wildcards.rna} \
        {input.fasta} {params.gatkIgnoreHeaderCheck} {output.counted} \
        {params.bcftools} {params.samtools} {params.gatk} ) 

        {params.log_func}

        runScript {input.script} PACK {log} {params.to_log}

        """
